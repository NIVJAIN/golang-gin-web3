// package main

// import (
// 	"context"
// 	"crypto/ecdsa"
// 	"fmt"
// 	"log"
// 	"math/big"

// 	// "github.com/.../.../api" // this would be your generated smart contract bindings
// 	"github.com/nivjain/golang-gin-web3/api"

// 	"github.com/ethereum/go-ethereum/accounts/abi/bind"
// 	"github.com/ethereum/go-ethereum/crypto"
// 	"github.com/ethereum/go-ethereum/ethclient"
// )

// // abigen --abi=./build/__contracts_MySmartContract_sol_MySmartContract.abi --bin=./build/__contracts_MySmartContract_sol_MySmartContract.bin --pkg=api --out=./api/MySmartContract.go
// func main() {
// 	client, err := ethclient.Dial("http://127.0.0.1:7545")
// 	if err != nil {
// 		panic(err)
// 	}
// private_key := os.Getenv("PRIVATE_KEY")
// privateKey, err := crypto.HexToECDSA(private_key)
// privateKey, err := crypto.HexToECDSA(private_key)

// 	// privateKey, err := crypto.HexToECDSA(" consider quality wild fat farm  bundle laundry side one lemon")
// 	if err != nil {
// 		log.Println(err)
// 		panic(err)
// 	}

// 	publicKey := privateKey.Public()
// 	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
// 	if !ok {
// 		panic("invalid key")
// 	}

// 	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
// 	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
// 	if err != nil {
// 		log.Println(err)
// 		panic(err)
// 	}

// 	chainID, err := client.ChainID(context.Background())
// 	if err != nil {
// 		panic(err)
// 	}

// 	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, chainID)
// 	if err != nil {
// 		panic(err)
// 	}
// 	auth.Nonce = big.NewInt(int64(nonce))
// 	auth.Value = big.NewInt(0)      // in wei
// 	auth.GasLimit = uint64(3000000) // in units
// 	auth.GasPrice = big.NewInt(1000000)

// 	address, tx, instance, err := api.DeployApi(auth, client)
// 	if err != nil {
// 		panic(err)
// 	}

// 	fmt.Println(address.Hex())

// 	_, _ = instance, tx
// }
